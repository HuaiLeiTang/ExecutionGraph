// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SOCKETLINK_EXECUTIONGRAPH_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_SOCKETLINK_EXECUTIONGRAPH_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace executionGraph {
namespace serialization {

struct SocketLink;

MANUALLY_ALIGNED_STRUCT(8) SocketLink FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t outNodeId_;
  uint64_t outSocketIdx_;
  uint64_t inNodeId_;
  uint64_t inSocketIdx_;
  uint8_t isWriteLink_;
  int8_t padding0__;  int16_t padding1__;  int32_t padding2__;

 public:
  SocketLink() {
    memset(this, 0, sizeof(SocketLink));
  }
  SocketLink(uint64_t _outNodeId, uint64_t _outSocketIdx, uint64_t _inNodeId, uint64_t _inSocketIdx, bool _isWriteLink)
      : outNodeId_(flatbuffers::EndianScalar(_outNodeId)),
        outSocketIdx_(flatbuffers::EndianScalar(_outSocketIdx)),
        inNodeId_(flatbuffers::EndianScalar(_inNodeId)),
        inSocketIdx_(flatbuffers::EndianScalar(_inSocketIdx)),
        isWriteLink_(flatbuffers::EndianScalar(static_cast<uint8_t>(_isWriteLink))),
        padding0__(0),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;    (void)padding1__;    (void)padding2__;
  }
  uint64_t outNodeId() const {
    return flatbuffers::EndianScalar(outNodeId_);
  }
  uint64_t outSocketIdx() const {
    return flatbuffers::EndianScalar(outSocketIdx_);
  }
  uint64_t inNodeId() const {
    return flatbuffers::EndianScalar(inNodeId_);
  }
  uint64_t inSocketIdx() const {
    return flatbuffers::EndianScalar(inSocketIdx_);
  }
  bool isWriteLink() const {
    return flatbuffers::EndianScalar(isWriteLink_) != 0;
  }
};
STRUCT_END(SocketLink, 40);

}  // namespace serialization
}  // namespace executionGraph

#endif  // FLATBUFFERS_GENERATED_SOCKETLINK_EXECUTIONGRAPH_SERIALIZATION_H_
