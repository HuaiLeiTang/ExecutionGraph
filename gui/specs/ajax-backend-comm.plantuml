@startuml
participant client as "client js"

box "CEF [IO-Thread]" #LightGrey
participant CEF

participant backendHandlerFactory << BackendSchemeHandlerFactory >>
participant requestHandler << BackendResourceHandler >>
end box

box "backend [Dispatcher-Thread]" #LightGrey
    participant messageDispatcher as "AppHandler::m_messageDispatcher" <<MessageDispatcher>>
	participant backendMessageHandler <<BackendMessageHandler>>
    participant executionGraphBackend <<ExecutionGraphBackend>>
end box

client -> CEF : AJAX Request:\nhttp://executiongraph-backend/<requestId>
activate CEF

    CEF -> backendHandlerFactory : ""Create(...)"" 
    activate backendHandlerFactory
        backendHandlerFactory -> requestHandler : ""create (from pool)""
        activate requestHandler
        backendHandlerFactory <-- requestHandler : ""requestHandler""
        deactivate requestHandler
        CEF <-- backendHandlerFactory : ""requestHandler""
    deactivate backendHandlerFactory

    CEF -> requestHandler : ""ProcessRequest(request, callback)""
    activate requestHandler
        requestHandler -> requestHandler : initRequest()
        CEF <-- requestHandler : ""false"" [error happened]
        hnote over requestHandler : handling request
        requestHandler -> messageDispatcher : ""addRequest(request,response)""\n[response contains callback: response headers ready]
        activate messageDispatcher
        requestHandler <-- messageDispatcher :
        deactivate messageDispatcher
        CEF <-- requestHandler : ""true""
    deactivate requestHandler

    
    activate messageDispatcher
        messageDispatcher -> backendMessageHandler : ""handleRequest(request, response)""\n[optional threaded]
        activate backendMessageHandler
            hnote over backendMessageHandler: ""deserialize(request)""
            backendMessageHandler -> executionGraphBackend : do work, e.g. ""addNode(...)""
            activate executionGraphBackend
                backendMessageHandler <-- executionGraphBackend : completed
            deactivate executionGraphBackend
            hnote over backendMessageHandler: ""serialize(response)""
            messageDispatcher <-- backendMessageHandler
        deactivate backendMessageHandler
    hnote over messageDispatcher: ""response.ready()""\n[or ""cancel("could not add node")""]

    CEF -> requestHandler : ""GetResponseHeaders(response, responseLength, redirectUrl)""
    deactivate messageDispatcher 
    activate requestHandler
        hnote over requestHandler: set MIME type and response length \n[or ""SetError()""]
        CEF <- requestHandler
    deactivate requestHandler

    CEF -> requestHandler : ""ReadResponse(dataOut, bytesToRead, bytesRead, callback)""
    activate requestHandler
        hnote over requestHandler: copy data to dataOut
        CEF <- requestHandler : ""true, bytesRead = 512""
    deactivate requestHandler

    CEF -> client : AJAX Response
deactivate CEF
@enduml