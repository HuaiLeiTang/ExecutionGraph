// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GENERALINFOMESSAGES_EXECUTIONGRAPHGUI_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_GENERALINFOMESSAGES_EXECUTIONGRAPHGUI_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "GraphTypeDescription_generated.h"
#include "NodeTypeDescription_generated.h"
#include "SocketTypeDescription_generated.h"

namespace executionGraphGUI {
namespace serialization {

struct GetAllGraphTypeDescriptionsResponse;

struct GetAllGraphTypeDescriptionsResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_GRAPHSTYPES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<GraphTypeDescription>> *graphsTypes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<GraphTypeDescription>> *>(VT_GRAPHSTYPES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GRAPHSTYPES) &&
           verifier.Verify(graphsTypes()) &&
           verifier.VerifyVectorOfTables(graphsTypes()) &&
           verifier.EndTable();
  }
};

struct GetAllGraphTypeDescriptionsResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_graphsTypes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GraphTypeDescription>>> graphsTypes) {
    fbb_.AddOffset(GetAllGraphTypeDescriptionsResponse::VT_GRAPHSTYPES, graphsTypes);
  }
  explicit GetAllGraphTypeDescriptionsResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetAllGraphTypeDescriptionsResponseBuilder &operator=(const GetAllGraphTypeDescriptionsResponseBuilder &);
  flatbuffers::Offset<GetAllGraphTypeDescriptionsResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetAllGraphTypeDescriptionsResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetAllGraphTypeDescriptionsResponse> CreateGetAllGraphTypeDescriptionsResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GraphTypeDescription>>> graphsTypes = 0) {
  GetAllGraphTypeDescriptionsResponseBuilder builder_(_fbb);
  builder_.add_graphsTypes(graphsTypes);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetAllGraphTypeDescriptionsResponse> CreateGetAllGraphTypeDescriptionsResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<GraphTypeDescription>> *graphsTypes = nullptr) {
  return executionGraphGUI::serialization::CreateGetAllGraphTypeDescriptionsResponse(
      _fbb,
      graphsTypes ? _fbb.CreateVector<flatbuffers::Offset<GraphTypeDescription>>(*graphsTypes) : 0);
}

inline const executionGraphGUI::serialization::GetAllGraphTypeDescriptionsResponse *GetGetAllGraphTypeDescriptionsResponse(const void *buf) {
  return flatbuffers::GetRoot<executionGraphGUI::serialization::GetAllGraphTypeDescriptionsResponse>(buf);
}

inline const executionGraphGUI::serialization::GetAllGraphTypeDescriptionsResponse *GetSizePrefixedGetAllGraphTypeDescriptionsResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<executionGraphGUI::serialization::GetAllGraphTypeDescriptionsResponse>(buf);
}

inline bool VerifyGetAllGraphTypeDescriptionsResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<executionGraphGUI::serialization::GetAllGraphTypeDescriptionsResponse>(nullptr);
}

inline bool VerifySizePrefixedGetAllGraphTypeDescriptionsResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<executionGraphGUI::serialization::GetAllGraphTypeDescriptionsResponse>(nullptr);
}

inline void FinishGetAllGraphTypeDescriptionsResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<executionGraphGUI::serialization::GetAllGraphTypeDescriptionsResponse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGetAllGraphTypeDescriptionsResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<executionGraphGUI::serialization::GetAllGraphTypeDescriptionsResponse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace serialization
}  // namespace executionGraphGUI

#endif  // FLATBUFFERS_GENERATED_GENERALINFOMESSAGES_EXECUTIONGRAPHGUI_SERIALIZATION_H_
