// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GRAPHMANIPULATIONMESSAGES_EXECUTIONGRAPHGUI_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_GRAPHMANIPULATIONMESSAGES_EXECUTIONGRAPHGUI_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

#include "LogicNode_generated.h"
#include "DataTypes_generated.h"
#include "NodeDescription_generated.h"
#include "SocketTypeDescription_generated.h"

namespace executionGraphGUI {
namespace serialization {

struct NodeConstructionInfo;

struct AddNodesRequest;

struct AddNodesResponse;

struct RemoveNodesRequest;

struct RemoveNodesResponse;

struct NodeConstructionInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_NAME = 6,
    VT_CONSTRUCTOR = 8
  };
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ConstructorKV>> *constructor() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ConstructorKV>> *>(VT_CONSTRUCTOR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_TYPE) &&
           verifier.Verify(type()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_CONSTRUCTOR) &&
           verifier.Verify(constructor()) &&
           verifier.VerifyVectorOfTables(constructor()) &&
           verifier.EndTable();
  }
};

struct NodeConstructionInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(NodeConstructionInfo::VT_TYPE, type);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(NodeConstructionInfo::VT_NAME, name);
  }
  void add_constructor(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ConstructorKV>>> constructor) {
    fbb_.AddOffset(NodeConstructionInfo::VT_CONSTRUCTOR, constructor);
  }
  explicit NodeConstructionInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NodeConstructionInfoBuilder &operator=(const NodeConstructionInfoBuilder &);
  flatbuffers::Offset<NodeConstructionInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NodeConstructionInfo>(end);
    fbb_.Required(o, NodeConstructionInfo::VT_TYPE);
    return o;
  }
};

inline flatbuffers::Offset<NodeConstructionInfo> CreateNodeConstructionInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ConstructorKV>>> constructor = 0) {
  NodeConstructionInfoBuilder builder_(_fbb);
  builder_.add_constructor(constructor);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<NodeConstructionInfo> CreateNodeConstructionInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<ConstructorKV>> *constructor = nullptr) {
  return executionGraphGUI::serialization::CreateNodeConstructionInfo(
      _fbb,
      type ? _fbb.CreateString(type) : 0,
      name ? _fbb.CreateString(name) : 0,
      constructor ? _fbb.CreateVector<flatbuffers::Offset<ConstructorKV>>(*constructor) : 0);
}

struct AddNodesRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NODES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<NodeConstructionInfo>> *nodes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<NodeConstructionInfo>> *>(VT_NODES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODES) &&
           verifier.Verify(nodes()) &&
           verifier.VerifyVectorOfTables(nodes()) &&
           verifier.EndTable();
  }
};

struct AddNodesRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nodes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NodeConstructionInfo>>> nodes) {
    fbb_.AddOffset(AddNodesRequest::VT_NODES, nodes);
  }
  explicit AddNodesRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddNodesRequestBuilder &operator=(const AddNodesRequestBuilder &);
  flatbuffers::Offset<AddNodesRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddNodesRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddNodesRequest> CreateAddNodesRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NodeConstructionInfo>>> nodes = 0) {
  AddNodesRequestBuilder builder_(_fbb);
  builder_.add_nodes(nodes);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddNodesRequest> CreateAddNodesRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<NodeConstructionInfo>> *nodes = nullptr) {
  return executionGraphGUI::serialization::CreateAddNodesRequest(
      _fbb,
      nodes ? _fbb.CreateVector<flatbuffers::Offset<NodeConstructionInfo>>(*nodes) : 0);
}

struct AddNodesResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NODES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<NodeDescription>> *nodes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<NodeDescription>> *>(VT_NODES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NODES) &&
           verifier.Verify(nodes()) &&
           verifier.VerifyVectorOfTables(nodes()) &&
           verifier.EndTable();
  }
};

struct AddNodesResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nodes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NodeDescription>>> nodes) {
    fbb_.AddOffset(AddNodesResponse::VT_NODES, nodes);
  }
  explicit AddNodesResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddNodesResponseBuilder &operator=(const AddNodesResponseBuilder &);
  flatbuffers::Offset<AddNodesResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddNodesResponse>(end);
    fbb_.Required(o, AddNodesResponse::VT_NODES);
    return o;
  }
};

inline flatbuffers::Offset<AddNodesResponse> CreateAddNodesResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NodeDescription>>> nodes = 0) {
  AddNodesResponseBuilder builder_(_fbb);
  builder_.add_nodes(nodes);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddNodesResponse> CreateAddNodesResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<NodeDescription>> *nodes = nullptr) {
  return executionGraphGUI::serialization::CreateAddNodesResponse(
      _fbb,
      nodes ? _fbb.CreateVector<flatbuffers::Offset<NodeDescription>>(*nodes) : 0);
}

struct RemoveNodesRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_IDS = 4
  };
  const flatbuffers::Vector<uint64_t> *ids() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_IDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_IDS) &&
           verifier.Verify(ids()) &&
           verifier.EndTable();
  }
};

struct RemoveNodesRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ids(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> ids) {
    fbb_.AddOffset(RemoveNodesRequest::VT_IDS, ids);
  }
  explicit RemoveNodesRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveNodesRequestBuilder &operator=(const RemoveNodesRequestBuilder &);
  flatbuffers::Offset<RemoveNodesRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveNodesRequest>(end);
    fbb_.Required(o, RemoveNodesRequest::VT_IDS);
    return o;
  }
};

inline flatbuffers::Offset<RemoveNodesRequest> CreateRemoveNodesRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> ids = 0) {
  RemoveNodesRequestBuilder builder_(_fbb);
  builder_.add_ids(ids);
  return builder_.Finish();
}

inline flatbuffers::Offset<RemoveNodesRequest> CreateRemoveNodesRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *ids = nullptr) {
  return executionGraphGUI::serialization::CreateRemoveNodesRequest(
      _fbb,
      ids ? _fbb.CreateVector<uint64_t>(*ids) : 0);
}

struct RemoveNodesResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_IDS = 4
  };
  const flatbuffers::Vector<uint64_t> *ids() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_IDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IDS) &&
           verifier.Verify(ids()) &&
           verifier.EndTable();
  }
};

struct RemoveNodesResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ids(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> ids) {
    fbb_.AddOffset(RemoveNodesResponse::VT_IDS, ids);
  }
  explicit RemoveNodesResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveNodesResponseBuilder &operator=(const RemoveNodesResponseBuilder &);
  flatbuffers::Offset<RemoveNodesResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveNodesResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveNodesResponse> CreateRemoveNodesResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> ids = 0) {
  RemoveNodesResponseBuilder builder_(_fbb);
  builder_.add_ids(ids);
  return builder_.Finish();
}

inline flatbuffers::Offset<RemoveNodesResponse> CreateRemoveNodesResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *ids = nullptr) {
  return executionGraphGUI::serialization::CreateRemoveNodesResponse(
      _fbb,
      ids ? _fbb.CreateVector<uint64_t>(*ids) : 0);
}

}  // namespace serialization
}  // namespace executionGraphGUI

#endif  // FLATBUFFERS_GENERATED_GRAPHMANIPULATIONMESSAGES_EXECUTIONGRAPHGUI_SERIALIZATION_H_
